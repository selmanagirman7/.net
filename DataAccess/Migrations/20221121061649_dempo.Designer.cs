// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221121061649_dempo")]
    partial class dempo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutDescriptionEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutTitleEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VissionEng")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Entity.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdressEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponayMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Massage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Entity.Corporate", b =>
                {
                    b.Property<int>("CorporateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEng")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CorporateId");

                    b.ToTable("Corporates");
                });

            modelBuilder.Entity("Entity.Galery", b =>
                {
                    b.Property<int>("GaleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitleEng")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GaleryId");

                    b.ToTable("Galeries");
                });

            modelBuilder.Entity("Entity.HomeAbout", b =>
                {
                    b.Property<int>("HomeAboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Feature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureDesc2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureDesc2Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureDescEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureEng")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HomeAboutId");

                    b.ToTable("HomeAbouts");
                });

            modelBuilder.Entity("Entity.OurService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureDescEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEng")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("OurServices");
                });

            modelBuilder.Entity("Entity.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entity.ProductEntity.Asyem", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Asyems");
                });

            modelBuilder.Entity("Entity.ProductEntity.Atlas", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Atlases");
                });

            modelBuilder.Entity("Entity.ProductEntity.Bally", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Ballies");
                });

            modelBuilder.Entity("Entity.ProductEntity.Baytas", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Baytases");
                });

            modelBuilder.Entity("Entity.ProductEntity.Besel", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Besels");
                });

            modelBuilder.Entity("Entity.ProductEntity.BmiTerazi", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("BmiTerazis");
                });

            modelBuilder.Entity("Entity.ProductEntity.Candan", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Candans");
                });

            modelBuilder.Entity("Entity.ProductEntity.Celebi", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Celebis");
                });

            modelBuilder.Entity("Entity.ProductEntity.Cerpa", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Cerpas");
                });

            modelBuilder.Entity("Entity.ProductEntity.Dayson", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Daysons");
                });

            modelBuilder.Entity("Entity.ProductEntity.Difix", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Difixes");
                });

            modelBuilder.Entity("Entity.ProductEntity.Duyar", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Duyars");
                });

            modelBuilder.Entity("Entity.ProductEntity.Eltos", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Eltos");
                });

            modelBuilder.Entity("Entity.ProductEntity.ErsaMil", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ErsaMils");
                });

            modelBuilder.Entity("Entity.ProductEntity.ErsaPiton", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ErsaPitons");
                });

            modelBuilder.Entity("Entity.ProductEntity.Firca", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Fircas");
                });

            modelBuilder.Entity("Entity.ProductEntity.Inan", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Inans");
                });

            modelBuilder.Entity("Entity.ProductEntity.Ithal", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Ithals");
                });

            modelBuilder.Entity("Entity.ProductEntity.Izeltas", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Izeltas");
                });

            modelBuilder.Entity("Entity.ProductEntity.Kale", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("kales");
                });

            modelBuilder.Entity("Entity.ProductEntity.Karbosan", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Karbosans");
                });

            modelBuilder.Entity("Entity.ProductEntity.Koral", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Korals");
                });

            modelBuilder.Entity("Entity.ProductEntity.Made", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Mades");
                });

            modelBuilder.Entity("Entity.ProductEntity.MaxExtra", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("MaxExtras");
                });

            modelBuilder.Entity("Entity.ProductEntity.Mte", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Mtes");
                });

            modelBuilder.Entity("Entity.ProductEntity.Nursan", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Nursans");
                });

            modelBuilder.Entity("Entity.ProductEntity.Pars", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Parses");
                });

            modelBuilder.Entity("Entity.ProductEntity.Prox", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Proxes");
                });

            modelBuilder.Entity("Entity.ProductEntity.Std", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Stds");
                });

            modelBuilder.Entity("Entity.ProductEntity.TakımCanta", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("TakımCantas");
                });

            modelBuilder.Entity("Entity.ProductEntity.Tomax", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("tomaxes");
                });

            modelBuilder.Entity("Entity.ProductEntity.Tursan", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Tursans");
                });

            modelBuilder.Entity("Entity.ProductEntity.Yuma", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxSizeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Yumas");
                });

            modelBuilder.Entity("Entity.Referance", b =>
                {
                    b.Property<int>("ReferanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferanceNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferanceId");

                    b.ToTable("Referances");
                });

            modelBuilder.Entity("Entity.Slider", b =>
                {
                    b.Property<int>("SliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnSliderText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnSliderText2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnSliderText3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnSliderText4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnSliderText5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderText2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderText3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderText4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderText5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderId");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Entity.Vega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iskonto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonyTyp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Statu")
                        .HasColumnType("bit");

                    b.Property<string>("Stok")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VegaProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
